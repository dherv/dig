/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/suggestions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suggestions.id"];
          created_at?: parameters["rowFilter.suggestions.created_at"];
          show_id?: parameters["rowFilter.suggestions.show_id"];
          user_id?: parameters["rowFilter.suggestions.user_id"];
          friendship_id?: parameters["rowFilter.suggestions.friendship_id"];
          show_media_type?: parameters["rowFilter.suggestions.show_media_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["suggestions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** suggestions */
          suggestions?: definitions["suggestions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suggestions.id"];
          created_at?: parameters["rowFilter.suggestions.created_at"];
          show_id?: parameters["rowFilter.suggestions.show_id"];
          user_id?: parameters["rowFilter.suggestions.user_id"];
          friendship_id?: parameters["rowFilter.suggestions.friendship_id"];
          show_media_type?: parameters["rowFilter.suggestions.show_media_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.suggestions.id"];
          created_at?: parameters["rowFilter.suggestions.created_at"];
          show_id?: parameters["rowFilter.suggestions.show_id"];
          user_id?: parameters["rowFilter.suggestions.user_id"];
          friendship_id?: parameters["rowFilter.suggestions.friendship_id"];
          show_media_type?: parameters["rowFilter.suggestions.show_media_type"];
        };
        body: {
          /** suggestions */
          suggestions?: definitions["suggestions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/friendships": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          created_at?: parameters["rowFilter.friendships.created_at"];
          updated_at?: parameters["rowFilter.friendships.updated_at"];
          user_1?: parameters["rowFilter.friendships.user_1"];
          user_2?: parameters["rowFilter.friendships.user_2"];
          status?: parameters["rowFilter.friendships.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friendships"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friendships */
          friendships?: definitions["friendships"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          created_at?: parameters["rowFilter.friendships.created_at"];
          updated_at?: parameters["rowFilter.friendships.updated_at"];
          user_1?: parameters["rowFilter.friendships.user_1"];
          user_2?: parameters["rowFilter.friendships.user_2"];
          status?: parameters["rowFilter.friendships.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships.id"];
          created_at?: parameters["rowFilter.friendships.created_at"];
          updated_at?: parameters["rowFilter.friendships.updated_at"];
          user_1?: parameters["rowFilter.friendships.user_1"];
          user_2?: parameters["rowFilter.friendships.user_2"];
          status?: parameters["rowFilter.friendships.status"];
        };
        body: {
          /** friendships */
          friendships?: definitions["friendships"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/show_media_types": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.show_media_types.id"];
          created_at?: parameters["rowFilter.show_media_types.created_at"];
          type?: parameters["rowFilter.show_media_types.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["show_media_types"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** show_media_types */
          show_media_types?: definitions["show_media_types"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.show_media_types.id"];
          created_at?: parameters["rowFilter.show_media_types.created_at"];
          type?: parameters["rowFilter.show_media_types.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.show_media_types.id"];
          created_at?: parameters["rowFilter.show_media_types.created_at"];
          type?: parameters["rowFilter.show_media_types.type"];
        };
        body: {
          /** show_media_types */
          show_media_types?: definitions["show_media_types"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/friendships_statuses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships_statuses.id"];
          created_at?: parameters["rowFilter.friendships_statuses.created_at"];
          status?: parameters["rowFilter.friendships_statuses.status"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["friendships_statuses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** friendships_statuses */
          friendships_statuses?: definitions["friendships_statuses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships_statuses.id"];
          created_at?: parameters["rowFilter.friendships_statuses.created_at"];
          status?: parameters["rowFilter.friendships_statuses.status"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.friendships_statuses.id"];
          created_at?: parameters["rowFilter.friendships_statuses.created_at"];
          status?: parameters["rowFilter.friendships_statuses.status"];
        };
        body: {
          /** friendships_statuses */
          friendships_statuses?: definitions["friendships_statuses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  suggestions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: bigint */
    show_id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `friendships.id`.<fk table='friendships' column='id'/>
     */
    friendship_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `show_media_types.id`.<fk table='show_media_types' column='id'/>
     */
    show_media_type: number;
  };
  /** @description user relation table */
  friendships: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_1: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_2: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `friendships_statuses.id`.<fk table='friendships_statuses' column='id'/>
     */
    status?: number;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
  };
  show_media_types: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    type: string;
  };
  friendships_statuses: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    status: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description suggestions */
  "body.suggestions": definitions["suggestions"];
  /** Format: bigint */
  "rowFilter.suggestions.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.suggestions.created_at": string;
  /** Format: bigint */
  "rowFilter.suggestions.show_id": string;
  /** Format: uuid */
  "rowFilter.suggestions.user_id": string;
  /** Format: bigint */
  "rowFilter.suggestions.friendship_id": string;
  /** Format: bigint */
  "rowFilter.suggestions.show_media_type": string;
  /** @description friendships */
  "body.friendships": definitions["friendships"];
  /** Format: bigint */
  "rowFilter.friendships.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.friendships.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.friendships.updated_at": string;
  /** Format: uuid */
  "rowFilter.friendships.user_1": string;
  /** Format: uuid */
  "rowFilter.friendships.user_2": string;
  /** Format: bigint */
  "rowFilter.friendships.status": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** @description show_media_types */
  "body.show_media_types": definitions["show_media_types"];
  /** Format: bigint */
  "rowFilter.show_media_types.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.show_media_types.created_at": string;
  /** Format: character varying */
  "rowFilter.show_media_types.type": string;
  /** @description friendships_statuses */
  "body.friendships_statuses": definitions["friendships_statuses"];
  /** Format: bigint */
  "rowFilter.friendships_statuses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.friendships_statuses.created_at": string;
  /** Format: character varying */
  "rowFilter.friendships_statuses.status": string;
}

export interface operations {}

export interface external {}
